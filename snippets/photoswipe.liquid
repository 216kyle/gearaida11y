<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="pswp__bg"></div>
  <div class="pswp__scroll-wrap">
    <div class="pswp__container">
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">
        <div class="pswp__counter"></div>
        <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
        <button class="pswp__button pswp__button--share" title="Share"></button>
        <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
        <div class="pswp__preloader">
          <div class="pswp__preloader__icn">
            <div class="pswp__preloader__cut">
              <div class="pswp__preloader__donut"></div>
            </div>
          </div>
        </div>
      </div>
      <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
        <div class="pswp__share-tooltip"></div>
      </div>
      <button class="pswp__button--arrow--left" title="Previous (arrow left)"></button>
      <button class="pswp__button--arrow--right" title="Next (arrow right)"></button>
      <div class="pswp__caption">
        <div class="pswp__caption__center"></div>
      </div>
    </div>
  </div>
</div>

<script>
var startPhotoSwipe = function () {
  var initPhotoSwipeFromDOM = function(gallerySelector) {

    // find nearest parent element
    var closest = function closest(el, fn) {
      return el && ( fn(el) ? el : closest(el.parentNode, fn) );
    };

    // triggers when user clicks on thumbnail
    var onThumbnailsClick = function(e) {
      e = e || window.event;
      e.preventDefault ? e.preventDefault() : e.returnValue = false;

      var eTarget = e.target || e.srcElement;

      // find root element of slide
      var clickedListItem = closest(eTarget, function(el) {
        return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
      });

      if(!clickedListItem) {
        return;
      }

      // find index of clicked item by looping through all child nodes
      // alternatively, you may define index via data- attribute
      var clickedGallery = clickedListItem.parentNode,
          childNodes = clickedListItem.parentNode.childNodes,
          numChildNodes = childNodes.length,
          nodeIndex = 0,
          index;

      index = clickedListItem.dataset.swiperSlideIndex;



      if(index >= 0) {
        // open PhotoSwipe if valid index found
        openPhotoSwipe( index, clickedGallery );
      }
      return false;
    };

    // parse picture index and gallery index from URL (#&pid=1&gid=2)
    var photoswipeParseHash = function() {
      var hash = window.location.hash.substring(1),
          params = {};

      if(hash.length < 5) {
        return params;
      }

      var vars = hash.split('&');
      for (var i = 0; i < vars.length; i++) {
        if(!vars[i]) {
          continue;
        }
        var pair = vars[i].split('=');  
        if(pair.length < 2) {
          continue;
        }           
        params[pair[0]] = pair[1];
      }

      if(params.gid) {
        params.gid = parseInt(params.gid, 10);
      }

      return params;
    };

    var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
      var pswpElement = document.querySelectorAll('.pswp')[0],
          gallery,
          options,
          items;

      $('body').addClass('pswp--opened');
      items = [
        {% for image in product.images %}
        {% if image.src contains 'lifestyle' or image.src contains 'Lifestyle' %}
        {
        smallImage: {
          src: '{{ image | img_url: '1024x' }}',
            w:1024,
            h:683
        },
        mediumImage: {
          src: '{{ image | img_url: '1400x' }}',
            w:1400,
            h:933
        },
        originalImage: {
            src: '{{ image | product_img_url: 'master' }}',
            w: 3000,
            h: 2000
        }
        {% else %}
        {
        smallImage: {
          src: '{{ image | img_url: '1024x1024' }}',
            w:1024,
            h:1024
        },
        mediumImage: {
          src: '{{ image | img_url: '1400x1400' }}',
            w:1400,
            h:1400
        },
        originalImage: {
            src: '{{ image | product_img_url: 'master' }}',
            w: 3000,
            h: 3000
        }
        {% endif %}
        {% if forloop.last == true %} }{% else %} }, {% endif %}
        {% endfor %}
        ];

      // define options (if needed)
      options = {
        // define gallery index (for URL)
        galleryUID: galleryElement.getAttribute('data-pswp-uid'),
        showHideOpacity:true,
        getThumbBoundsFn:false,
        history: false,
        barsSize: {
          top:44,
          bottom:0
        },
        getDoubleTapZoom: function(isMouseClick, item) {

          if(isMouseClick) {
            // is mouse click on image or zoom icon
            // zoom to original
            return 0.65;
            // e.g. for 1400px image:
            // 0.5 - zooms to 700px
            // 2   - zooms to 2800px
          } else {
            // is double-tap
            // zoom to original if initial zoom is less than 0.7x,
            // otherwise to 1.5x, to make sure that double-tap gesture always zooms image
            return item.initialZoomLevel < 0.7 ? 0.65 : 1;
          }
        }
      };

      // PhotoSwipe opened from URL
      if(fromURL) {
        if(options.galleryPIDs) {
          // parse real index when custom PIDs are used 
          // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
          for(var j = 0; j < items.length; j++) {
            if(items[j].pid == index) {
              options.index = j;
              break;
            }
          }
        } else {
          // in URL indexes start from 1
          options.index = parseInt(index, 10) - 1;
        }
      } else {
        options.index = parseInt(index, 10);
      }

      // exit if index not found
      if( isNaN(options.index) ) {
        return;
      }

      if(disableAnimation) {
        options.showAnimationDuration = 0;
      }

      // Pass data to PhotoSwipe and initialize it
      gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
  
      // create variable that will store real size of viewport
      var realViewportWidth,
          useLargeImages = false,
          useMediumImages = false,
          firstResize = true,
          imageSrcWillChange;
  
      gallery.listen('close', function(){
        $('body').removeClass('pswp--opened');
      });
      gallery.listen('beforeResize', function() {

        // calculate real pixels when size changes
        realViewportWidth = gallery.viewportSize.x * window.devicePixelRatio;

        // Code below is needed if you want image to switch dynamically on window.resize

        // Find out if current images need to be changed
        if(useLargeImages && realViewportWidth < 2208) {
          useMediumImages = false;
          useLargeImages = true;
          imageSrcWillChange = true;
        }
        else if(!useLargeImages && realViewportWidth < 2208 && realViewportWidth >= 1401) {
            useLargeImages = false;
            useMediumImages = true;
            imageSrcWillChange = true;
        }
        else if(!useLargeImages && realViewportWidth >= 2208) {
            useMediumImages = false;
            useLargeImages = true;
            imageSrcWillChange = true;
        }

        // Invalidate items only when source is changed and when it's not the first update
        if(imageSrcWillChange && !firstResize) {
            // invalidateCurrItems sets a flag on slides that are in DOM,
            // which will force update of content (image) on window.resize.
            gallery.invalidateCurrItems();
        }

        if(firstResize) {
            firstResize = false;
        }

        imageSrcWillChange = false;

      });

      // gettingData event fires each time PhotoSwipe retrieves image source & size
      gallery.listen('gettingData', function(index, item) {

        // Set image source & size based on real viewport width
        if( useLargeImages ) {
          item.src = item.originalImage.src;
          item.w = item.originalImage.w;
          item.h = item.originalImage.h;
        }
        else if( useMediumImages ) {
          item.src = item.mediumImage.src;
          item.w = item.mediumImage.w;
          item.h = item.mediumImage.h;
        }
        else {
          item.src = item.smallImage.src;
          item.w = item.smallImage.w;
          item.h = item.smallImage.h;
        }

        // It doesn't really matter what will you do here, 
        // as long as item.src, item.w and item.h have valid values.
        // Just avoid http requests in this listener, as it fires quite often

      });
      gallery.init();
    };

    // loop through all gallery elements and bind events
    var galleryElements = document.querySelectorAll( gallerySelector );

    for(var i = 0, l = galleryElements.length; i < l; i++) {
      galleryElements[i].setAttribute('data-pswp-uid', i+1);
      galleryElements[i].onclick = onThumbnailsClick;
    }

    // Parse URL and open gallery if it contains #&pid=3&gid=1
    var hashData = photoswipeParseHash();
    if(hashData.pid && hashData.gid) {
      openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
    }
  };

  // execute above function
  initPhotoSwipeFromDOM('.photoswipe-gallery');
};

if (document.readyState === 'complete' ) {
  setTimeout(startPhotoSwipe, 1);
} else {
  document.addEventListener('DOMContentLoaded', startPhotoSwipe);
}
</script>